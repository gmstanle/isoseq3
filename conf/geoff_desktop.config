params {
  //change the projectName variable to fit your groups project name
  projectName = "pb_exp1"
  projectDir = "/storage/pacbio-singlecell/pacbio_exp1/"
  
  //change this to fit your input directory globbing pattern
  input = '.'
  genome = 'mm10'
  primer_type = 'default'
 
  primers_stets {
    'default' {
      //default primers, see https://github.com/PacificBiosciences/IsoSeq3/blob/master/README_v3.1.md
      primer_file = 'resources/primers_original.fasta'
    }
    'bookend' {
      //primers contain one 5'G less
      //this is needed to allow for identification of capped transcripts
      primer_file = 'resources/primers_original.fasta'    
    }
  }
  genomes {
    'TAIR10' {
      fasta_file = "$params.projectDir/genomes/tair10/fasta/tair10.fa"
      intron_max = 5000
    }
    'mm10' {
      // 
      fasta_file = "$params.projectDir/genomes/GRCm38/fasta/grcm38.fa"
      intron_max = '100000'
    }
  }
}

process{

  executor = 'pbspro'
  module = ['Miniconda3']
  errorStrategy = 'retry'
  maxRetries = 2

 // appears that this code increases the requested cores, memory, and time 
 // if the task has to be attempted twice. Why increase cores, though?
  withName:ccs_calling{
    cpus = { 8 * task.attempt }
    memory = { 60.GB * task.attempt }
    time = { 16.h * task.attempt }
  }
  withName:primers_rm{
    cpus = { 8 * task.attempt }
    memory = { 60.GB * task.attempt }
    time = { 16.h * task.attempt }
  }
  withName:run_refine{
      cpus = { 8 * task.attempt }
      memory = { 60.GB * task.attempt }
      time = { 16.h * task.attempt}
  }
  withName:merge_samples{
    cpus = { 8 * task.attempt }
    memory = { 60.GB * task.attempt }
    time = { 16.h * task.attempt}
  }
  withName:cluster_reads{
    cpus = { 8 * task.attempt }
    memory = { 60.GB * task.attempt }
    time = { 16.h * task.attempt}
  }
  withName:polish_reads{
    cpus = { 8 * task.attempt }
    memory = { 60.GB * task.attempt }
    time = { 16.h * task.attempt}
  }
  withName:align_reads{
    cpus = { 8 * task.attempt }
    memory = { 60.GB * task.attempt }
    time = { 16.h * task.attempt}
  }
}